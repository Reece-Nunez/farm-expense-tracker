type User
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  username: String!
  email: String
  firstName: String
  lastName: String
  farmName: String
  phone: String
  aboutMe: String
  jobTitle: String
  location: String
  profilePictureKey: String
  role: String
  preferences: AWSJSON
  expenses: [Expense] @hasMany(indexName: "byUser", fields: ["id"])
  income: [Income] @hasMany(indexName: "byUser", fields: ["id"])
  teamMemberships: [TeamMember] @hasMany(indexName: "byUser", fields: ["id"])
}

type Expense
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  userId: ID! @index(name: "byUser")
  date: AWSDate!
  vendor: String!
  grandTotal: Float
  description: String
  receiptImageKey: String
  lineItems: [LineItem] @hasMany(indexName: "byExpenseID", fields: ["id"])
}

type LineItem
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  expenseID: ID! @index(name: "byExpenseID")
  expense: Expense @belongsTo(fields: ["expenseID"])
  item: String
  category: String
  quantity: Int
  unitCost: Float
  lineTotal: Float
}

type Income
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String! @index(name: "bySub", queryField: "incomesBySub")
  userId: ID! @index(name: "byUser")
  date: AWSDate!
  quantity: Int!
  price: Float!
  paymentMethod: String
  amount: Float!
  item: String
  notes: String
  livestockID: ID @index(name: "byLivestock", queryField: "incomesByLivestock")
  livestock: Livestock @belongsTo(fields: ["livestockID"])
}


type Field
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  name: String!
  acres: Float
  notes: String
  livestock: [Livestock] @hasMany(indexName: "byField", fields: ["id"])
}

type Livestock
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  name: String
  species: String!
  breed: String
  birthdate: AWSDate
  weight: Float
  gender: String
  status: String
  notes: String
  fieldID: ID @index(name: "byField")
  location: Field @belongsTo(fields: ["fieldID"])
  parents: [LivestockFamily] @hasMany(indexName: "byChild", fields: ["id"])
  children: [LivestockFamily] @hasMany(indexName: "byParent", fields: ["id"])
  medicalRecords: [MedicalRecord] @hasMany
  incomes: [Income] @hasMany(indexName: "byLivestock", fields: ["id"])
}

type LivestockFamily
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  parentID: ID! @index(name: "byParent")
  childID: ID! @index(name: "byChild")
}

type MedicalRecord
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  livestockID: ID! @index(name: "byLivestock")
  type: String!
  notes: String
  date: AWSDate
  medicine: String
  livestock: Livestock @belongsTo(fields: ["livestockID"])
}

type ChickenFlock
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  breed: String!
  count: Int!
  hasRooster: Boolean
  eggLogs: [EggLog] @hasMany
  notes: String
}

type EggLog
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  date: AWSDate!
  eggsCollected: Int!
  chickenFlockID: ID! @index(name: "byChickenFlock")
}

type InventoryItem
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  name: String!
  type: String!
  quantity: Int
  location: String
  acquiredDate: AWSDate
  notes: String
}

type Customer
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  name: String!
  email: String
  phone: String
  address: String
  city: String
  state: String
  zipCode: String
  country: String
  taxNumber: String
  notes: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  invoices: [Invoice] @hasMany(indexName: "byCustomer", fields: ["id"])
}

type Invoice
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  customerID: ID! @index(name: "byCustomer")
  customer: Customer @belongsTo(fields: ["customerID"])
  invoiceNumber: String!
  date: AWSDate!
  dueDate: AWSDate
  status: InvoiceStatus!
  subtotal: Float!
  taxRate: Float
  taxAmount: Float
  discountAmount: Float
  total: Float!
  notes: String
  terms: String
  paidDate: AWSDate
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  items: [InvoiceItem] @hasMany(indexName: "byInvoice", fields: ["id"])
}

type InvoiceItem
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  invoiceID: ID! @index(name: "byInvoice")
  invoice: Invoice @belongsTo(fields: ["invoiceID"])
  description: String!
  quantity: Float!
  unitPrice: Float!
  total: Float!
  category: String
  unit: String
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

type Product
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "sub" }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  sub: String!
  name: String!
  description: String
  category: String!
  unitPrice: Float!
  unit: String!
  sku: String
  barcode: String
  stockQuantity: Int
  minStockLevel: Int
  isActive: Boolean!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Farm
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "ownerSub" }
      { allow: private, operations: [read] }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  ownerSub: String!
  name: String!
  farmType: FarmType
  description: String
  address: String
  city: String
  state: String
  zipCode: String
  country: String
  acres: Float
  establishedYear: Int
  website: String
  businessRegistration: String
  taxId: String
  phoneNumber: String
  email: String
  isActive: Boolean!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  members: [TeamMember] @hasMany(indexName: "byFarm", fields: ["id"])
  invitations: [TeamInvitation] @hasMany(indexName: "byFarm", fields: ["id"])
}

type TeamMember
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "userSub" }
      { allow: private, operations: [read] }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  farmID: ID! @index(name: "byFarm")
  farm: Farm @belongsTo(fields: ["farmID"])
  userID: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  userSub: String!
  role: TeamRole!
  permissions: [String]
  isActive: Boolean!
  joinedAt: AWSDateTime
  lastLoginAt: AWSDateTime
  invitedBy: String
  notes: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type TeamInvitation
  @model
  @auth(
    rules: [
      { allow: private, operations: [read, create, update] }
      {
        allow: groups
        groups: ["Admins"]
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  farmID: ID! @index(name: "byFarm")
  farm: Farm @belongsTo(fields: ["farmID"])
  email: String!
  role: TeamRole!
  status: InvitationStatus!
  invitedByUserSub: String!
  invitedByName: String!
  message: String
  expiresAt: AWSDateTime
  acceptedAt: AWSDateTime
  rejectedAt: AWSDateTime
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum FarmType {
  LIVESTOCK
  CROP
  DAIRY
  POULTRY
  MIXED
  AQUACULTURE
  ORGANIC
  GREENHOUSE
  ORCHARD
  VINEYARD
  OTHER
}

enum TeamRole {
  OWNER
  ADMIN
  MANAGER
  EMPLOYEE
  VIEWER
  CONTRACTOR
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELLED
}
